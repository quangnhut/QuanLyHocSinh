<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fx.Core</name>
    </assembly>
    <members>
        <member name="T:Fx.ContextProvision.IContextProvider">
            <summary>
            Provides contextual data for tracing events
            </summary>
            <threadsafety instance="true"/>
        </member>
        <member name="M:Fx.ContextProvision.IContextProvider.ProvideContext(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds contextual metadata represented by <paramref name="data"/> to the current logical operation
            </summary>
            <param name="data">The metadata that should be added to the current logical operation</param>
            <returns>The new context containing all of the current logical operation information; when disposed, this object will remove the newly added metadata from the current logical operation</returns>
            <remarks>Due to the nature of this functionality being critical to instrumentation, in the error case of <paramref name="data"/> being null, it should be assumed that data is an empty collection. Further, in the event that any key or value within the collection is null, the case should be handled without throwing <see cref="T:System.Exception"/>s</remarks>
        </member>
        <member name="T:Fx.ContextProvision.LogicalOperationStackContextProvider">
            <summary>
            A <see cref="T:Fx.ContextProvision.IContextProvider"/> that leverages the .NET <see cref="P:System.Diagnostics.Trace.CorrelationManager"/> for determining and maintaining the current logical operation
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.ContextProvision.LogicalOperationStackContextProvider.Singleton">
            <summary>
            A singleton instance of the <see cref="T:Fx.ContextProvision.LogicalOperationStackContextProvider"/>
            </summary>
        </member>
        <member name="M:Fx.ContextProvision.LogicalOperationStackContextProvider.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.ContextProvision.LogicalOperationStackContextProvider"/> class from being created
            </summary>
        </member>
        <member name="P:Fx.ContextProvision.LogicalOperationStackContextProvider.Instance">
            <summary>
            Gets a singleton instance of the <see cref="T:Fx.ContextProvision.LogicalOperationStackContextProvider"/>
            </summary>
        </member>
        <member name="M:Fx.ContextProvision.LogicalOperationStackContextProvider.ProvideContext(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds the elements of <paramref name="data"/> to the <see cref="P:System.Diagnostics.Trace.CorrelationManager"/>'s logical operation stack
            </summary>
            <param name="data">The metadata that should be added to the current logical operation</param>
            <returns>The context that can be disposed in order to remove the added metadata from the current logical operation</returns>
        </member>
        <member name="T:Fx.ContextProvision.LogicalOperationStackContextProvider.Context">
            <summary>
            A representation of metadata having been added to a logical operation
            </summary>
        </member>
        <member name="F:Fx.ContextProvision.LogicalOperationStackContextProvider.Context.count">
            <summary>
            The number of elements in the metadata that was added to the current logical operation that should be removed when this object is disposed
            </summary>
        </member>
        <member name="F:Fx.ContextProvision.LogicalOperationStackContextProvider.Context.disposed">
            <summary>
            Whether or not this object is disposed
            </summary>
        </member>
        <member name="M:Fx.ContextProvision.LogicalOperationStackContextProvider.Context.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.ContextProvision.LogicalOperationStackContextProvider.Context"/> class
            </summary>
            <param name="count">The number of elements in the metadata that was added to the current logical operation that should be removed when this object is disposed</param>
        </member>
        <member name="M:Fx.ContextProvision.LogicalOperationStackContextProvider.Context.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
            </summary>
        </member>
        <member name="T:Fx.ContextProvision.NullContextProvider">
            <summary>
            A <see cref="T:Fx.ContextProvision.IContextProvider"/> that swallows all of the provided metadata
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.ContextProvision.NullContextProvider.Singleton">
            <summary>
            A singleton instance of the <see cref="T:Fx.ContextProvision.NullContextProvider"/>
            </summary>
        </member>
        <member name="M:Fx.ContextProvision.NullContextProvider.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.ContextProvision.NullContextProvider"/> class from being created
            </summary>
        </member>
        <member name="P:Fx.ContextProvision.NullContextProvider.Instance">
            <summary>
            Gets a singleton instance of the <see cref="T:Fx.ContextProvision.NullContextProvider"/>
            </summary>
        </member>
        <member name="M:Fx.ContextProvision.NullContextProvider.ProvideContext(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Swallows the metadata represented by <paramref name="data"/>
            </summary>
            <param name="data">The metadata being added to the current logical operation</param>
            <returns>The context that should be disposed to remove the added metadata from the current logical operation</returns>
        </member>
        <member name="T:Fx.ContextProvision.NullContextProvider.Context">
            <summary>
            A representation of metadata having been added to a logical operation
            </summary>
        </member>
        <member name="M:Fx.ContextProvision.NullContextProvider.Context.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.ContextProvision.NullContextProvider.Context"/> class
            </summary>
        </member>
        <member name="M:Fx.ContextProvision.NullContextProvider.Context.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
            </summary>
        </member>
        <member name="T:Fx.EnsureInline">
            <summary>
            Provides utilities for validating the preconditions of arguments prior to their use
            </summary>
            <remarks>
            <para>This class can be used to validate arguments in an "inline" fashion, meaning that the value being validated is either returned from the method, or an 
            exception is thrown indicating in what way the value is invalid. </para>
            <para>This allows for doing validations where a derived class might obtain an object during construction, and a property of that object is needed to construct 
            the base class. The original object should be validated before accessing its property, but you must construct the base class before the derived class's 
            constructor can invoke any validation code. For example, say that Bar is a base class:</para>
            <code>
            public sealed class Bar
            {
                ...
            
                public Bar(string name)
                {
                    Name = name;
                    ...
                }
                
                ...
                
                public string Name { get; set; }
                
                ...
            }
            </code>
            <para>Now say that you also have a derived class Foo which would take in some Settings in order to be fully initialized:</para>
            <code>
            public sealed class Settings
            {
                ...
                
                public string Name { get; set; }
                
                ...
            }
            
            public sealed class Foo : Bar
            {
                ...
                
                public Foo(Settings settings)
                    : base(settings.Name)
                {
                    ...
                }
                
                ...
            }
            </code>
            <para>In this case, we have used data in the constructor before we have validated it, which may cause, for example, a NullReferenceException. In order to throw 
            a proper exception in the event that data is null, we could write instead:</para>
            <code>
            public sealed class Foo : Bar
            {
                ...
                
                public Foo(Settings settings)
                    : base(EnsureInline.NotNull(settings, "settings").Name)
                {
                    ...
                }
                
                ...
            }
            </code>
            <para>Thus, we have validated data before we have used it, and we have derived from bar, and we were able to take in as a constructor parameter our own custom 
            data type containing all of the information needed to create a new Foo. </para>
            <para>Please note that there is a non-trivial cost to using these <see cref="T:Fx.EnsureInline"/> methods over using the <see cref="T:Fx.Ensure"/> methods, particularly 
            when the input parameter is a value-type, even if the return value is never used. Therefore, these methods should be used only in cases where the argument value
            is immediately required for use and must be validated before its use. These methods are not intended to supersede the <see cref="T:Fx.Ensure"/> methods. </para>
            </remarks>
            <threadsafety static="true"/>
        </member>
        <member name="M:Fx.EnsureInline.NotNull``1(``0,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null
            </summary>
            <typeparam name="T">The type of the value being validated</typeparam>
            <param name="value">The value to ensure is not null</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNullOrEmptyString(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null and is not <see cref="F:System.String.Empty"/>
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is not null and is not <see cref="F:System.String.Empty"/></param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see cref="F:System.String.Empty"/></exception>
        </member>
        <member name="M:Fx.EnsureInline.EnumerableNotEmpty``2(``0,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null and contains at least one element
            </summary>
            <typeparam name="TEnumerable">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> being validated</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> being validated</typeparam>
            <param name="value">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ensure is not null or and contains at least one element</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> contains no elements</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.Byte,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNegative(System.SByte,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.SByte,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNegative(System.Int16,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.Int16,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.UInt16,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNegative(System.Int32,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.Int32,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.UInt32,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNegative(System.Int64,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.Int64,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.UInt64,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNegative(System.Decimal,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.Decimal,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNegative(System.Double,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.Double,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.NotNegative(System.Single,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Single"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsPositive(System.Single,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Single"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsDefinedEnum(System.Enum,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid enumeration
            </summary>
            <param name="value">The enumeration value to ensure is a valid value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not a valid value</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsInstance``1(System.Type,``0,System.String)">
            <summary>
            Ensures that the type of <paramref name="value"/> is at least as derived as <paramref name="parent"/>
            </summary>
            <typeparam name="T">The type of the value that is ensured to be at least as derived as <paramref name="parent"/></typeparam>
            <param name="parent">the type to ensure that <paramref name="value"/>'s type is at least as derived as</param>
            <param name="value">The value of the type to ensure is at least as derived as <paramref name="parent"/></param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null or <paramref name="parent"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the type of <paramref name="value"/> is not at least as derived as <paramref name="parent"/>
            </exception>
        </member>
        <member name="M:Fx.EnsureInline.IsValidMacAddress(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid MAC address
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid MAC address</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid MAC address</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsValidSha1(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid SHA1
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid SHA1</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid SHA1</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsValidSha2(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid SHA2
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid SHA2</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid SHA1</exception>
        </member>
        <member name="M:Fx.EnsureInline.IsValidSha1OrSha2(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid SHA1 or SHA2
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid SHA1 or SHA2</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <returns><paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid SHA1 and not a valid SHA2</exception>
        </member>
        <member name="T:Fx.Ensure">
            <summary>
            Provides utilities for validating the preconditions of arguments prior to their use
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:Fx.Ensure.MacAddressExpression">
            <summary>
            A <see cref="T:System.Text.RegularExpressions.Regex"/> that matches valid MAC addresses
            </summary>
        </member>
        <member name="F:Fx.Ensure.Sha1Expression">
            <summary>
            A <see cref="T:System.Text.RegularExpressions.Regex"/> that matches valid SHA1s
            </summary>
        </member>
        <member name="F:Fx.Ensure.Sha2Expression">
            <summary>
            A <see cref="T:System.Text.RegularExpressions.Regex"/> that matches valid SHA1s
            </summary>
        </member>
        <member name="M:Fx.Ensure.NotNull``1(``0,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null
            </summary>
            <typeparam name="T">The type of the value being validated</typeparam>
            <param name="value">The value to ensure is not null</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
        </member>
        <member name="M:Fx.Ensure.NotNullOrEmptyString(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null and is not <see cref="F:System.String.Empty"/>
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is not null and is not <see cref="F:System.String.Empty"/></param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <see cref="F:System.String.Empty"/></exception>
        </member>
        <member name="M:Fx.Ensure.EnumerableNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not null and contains at least one element
            </summary>
            <typeparam name="T">The type of the values in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> being validated</typeparam>
            <param name="value">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to ensure is not null or and contains at least one element</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> contains no elements</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.Byte,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.NotNegative(System.SByte,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.SByte,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.NotNegative(System.Int16,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.Int16,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.UInt16,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.NotNegative(System.Int32,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.Int32,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.UInt32,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.NotNegative(System.Int64,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is not a negative value
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> to ensure is not a negative value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.Int64,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.UInt64,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.NotNegative(System.Decimal,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.Decimal,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.NotNegative(System.Double,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.Double,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.NotNegative(System.Single,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Single"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.IsPositive(System.Single,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a positive value
            </summary>
            <param name="value">The <see cref="T:System.Single"/> to ensure is a positive value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not positive</exception>
        </member>
        <member name="M:Fx.Ensure.IsDefinedEnum(System.Enum,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid enumeration
            </summary>
            <param name="value">The enumeration value to ensure is a valid value</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is not a valid value</exception>
        </member>
        <member name="M:Fx.Ensure.IsInstance``1(System.Type,``0,System.String)">
            <summary>
            Ensures that the type of <paramref name="value"/> is at least as derived as <paramref name="parent"/>
            </summary>
            <typeparam name="T">The type of the value that is ensured to be at least as derived as <paramref name="parent"/></typeparam>
            <param name="parent">the type to ensure that <paramref name="value"/>'s type is at least as derived as</param>
            <param name="value">The value of the type to ensure is at least as derived as <paramref name="parent"/></param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null or <paramref name="parent"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the type of <paramref name="value"/> is not at least as derived as <paramref name="parent"/>
            </exception>
        </member>
        <member name="M:Fx.Ensure.IsValidMacAddress(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid MAC address
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid MAC address</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid MAC address</exception>
        </member>
        <member name="M:Fx.Ensure.IsValidSha1(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid SHA1
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid SHA1</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid SHA1</exception>
        </member>
        <member name="M:Fx.Ensure.IsValidSha2(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid SHA2
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid SHA2</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid SHA1</exception>
        </member>
        <member name="M:Fx.Ensure.IsValidSha1OrSha2(System.String,System.String)">
            <summary>
            Ensures that <paramref name="value"/> is a valid SHA1 or SHA2
            </summary>
            <param name="value">The <see cref="T:System.String"/> to ensure is a valid SHA1 or SHA2</param>
            <param name="name">The name of the parameter whose provided argument was <paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is not a valid SHA1 and not a valid SHA2</exception>
        </member>
        <member name="T:Fx.Logging.EventIdentifier">
            <summary>
            A data type that indicates specific kind of event that may be emitted to a <see cref="T:Fx.Logging.ILogger"/>
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.EventIdentifier.id">
            <summary>
            The numeric representation that uniquely identifies this kind of event from other kinds of events
            </summary>
        </member>
        <member name="F:Fx.Logging.EventIdentifier.messageFormat">
            <summary>
            The format of the messages that events of this kind will have
            </summary>
        </member>
        <member name="M:Fx.Logging.EventIdentifier.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Logging.EventIdentifier"/> class
            </summary>
            <param name="id">The numeric representation that uniquely identifies this kind of event from other kinds of events</param>
            <param name="messageFormat">The format of the messages that events of this kind will have</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="messageFormat"/> is null</exception>
        </member>
        <member name="P:Fx.Logging.EventIdentifier.Id">
            <summary>
            Gets the numeric representation that uniquely identifies this kind of event from other kinds of events
            </summary>
        </member>
        <member name="P:Fx.Logging.EventIdentifier.MessageFormat">
            <summary>
            Gets the format of the messages that events of this kind will have
            </summary>
        </member>
        <member name="T:Fx.Logging.EventIdentifierExtensions">
            <summary>
            Extension methods for <see cref="T:Fx.Logging.EventIdentifier"/>s
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:Fx.Logging.EventIdentifierExtensions.FormatArgumentExpression">
            <summary>
            A regular expression that matches an argument in a format string
            </summary>
        </member>
        <member name="M:Fx.Logging.EventIdentifierExtensions.CreateRegularExpression(Fx.Logging.EventIdentifier)">
            <summary>
            Creates a <see cref="T:System.Text.RegularExpressions.Regex"/> that will match any message that uses the format specified by <paramref name="eventIdentifier"/>
            </summary>
            <param name="eventIdentifier">The <see cref="T:Fx.Logging.EventIdentifier"/> that we want to match messages from</param>
            <returns>A <see cref="T:System.Text.RegularExpressions.Regex"/> that will match any message that uses the format specified by <paramref name="eventIdentifier"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="eventIdentifier"/> is null</exception>
            <exception cref="T:System.FormatException">Thrown if the format specified by <paramref name="eventIdentifier"/> contains an unequal number of opening and closing curly braces for a single argument</exception>
            <remarks>The resulting <see cref="T:System.Text.RegularExpressions.Regex"/> uses the capture group "value" to contain the arguments that were used when formatting a message generated from <paramref name="eventIdentifier"/></remarks>
        </member>
        <member name="T:Fx.Logging.ILogger">
            <summary>
            An abstraction layer for emitting events to a log
            </summary>
            <threadsafety instance="true"/>
        </member>
        <member name="M:Fx.Logging.ILogger.EmitDetail(System.Int32,System.String)">
            <summary>
            Emits a verbose event to a log
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
            <remarks>Please note that this method is critical to instrumentation and therefore should throw no exceptions, regardless of the quality of the input</remarks>
        </member>
        <member name="M:Fx.Logging.ILogger.EmitInformation(System.Int32,System.String)">
            <summary>
            Emits an information event to a log
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
            <remarks>Please note that this method is critical to instrumentation and therefore should throw no exceptions, regardless of the quality of the input</remarks>
        </member>
        <member name="M:Fx.Logging.ILogger.EmitWarning(System.Int32,System.String)">
            <summary>
            Emits a warning event to a log
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
            <remarks>Please note that this method is critical to instrumentation and therefore should throw no exceptions, regardless of the quality of the input</remarks>
        </member>
        <member name="M:Fx.Logging.ILogger.EmitError(System.Int32,System.String)">
            <summary>
            Emits an error event to a log
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
            <remarks>Please note that this method is critical to instrumentation and therefore should throw no exceptions, regardless of the quality of the input</remarks>
        </member>
        <member name="T:Fx.Logging.LoggerExtensions">
            <summary>
            Extension methods for <see cref="T:Fx.Logging.ILogger"/>s
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitDetail(Fx.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Emits a formatted detail event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="messageFormat">The format that the message of the emitted event should use</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="messageFormat"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitDetail(Fx.Logging.ILogger,Fx.Logging.EventIdentifier,System.Object[])">
            <summary>
            Emits a formatted detail event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="eventIdentifier">The <see cref="T:Fx.Logging.EventIdentifier"/> that represents the kind of event being emitted</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="eventIdentifier"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitInformation(Fx.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Emits a formatted information event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="messageFormat">The format that the message of the emitted event should use</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="messageFormat"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitInformation(Fx.Logging.ILogger,Fx.Logging.EventIdentifier,System.Object[])">
            <summary>
            Emits a formatted information event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="eventIdentifier">The <see cref="T:Fx.Logging.EventIdentifier"/> that represents the kind of event being emitted</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="eventIdentifier"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitWarning(Fx.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Emits a formatted warning event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="messageFormat">The format that the message of the emitted event should use</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="messageFormat"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitWarning(Fx.Logging.ILogger,Fx.Logging.EventIdentifier,System.Object[])">
            <summary>
            Emits a formatted warning event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="eventIdentifier">The <see cref="T:Fx.Logging.EventIdentifier"/> that represents the kind of event being emitted</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="eventIdentifier"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitError(Fx.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
            Emits a formatted error event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="messageFormat">The format that the message of the emitted event should use</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="messageFormat"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.EmitError(Fx.Logging.ILogger,Fx.Logging.EventIdentifier,System.Object[])">
            <summary>
            Emits a formatted error event to a log
            </summary>
            <param name="logger">The <see cref="T:Fx.Logging.ILogger"/> that we will delegate that actual event emission to</param>
            <param name="eventIdentifier">The <see cref="T:Fx.Logging.EventIdentifier"/> that represents the kind of event being emitted</param>
            <param name="data">The data to use to complete the message of the emitted event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger"/> or <paramref name="eventIdentifier"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.LoggerExtensions.GetMessage(System.String,System.Object[])">
            <summary>
            Creates the message that should be emitted for the given string format, and data that it should contain
            </summary>
            <param name="format">The format that the resulting message should have</param>
            <param name="data">The data that should be included in the resulting message</param>
            <returns>A message based on <paramref name="format"/> and <paramref name="data"/> that handles different error cases in an attempt to provide as much data as possible in the event of a failure</returns>
        </member>
        <member name="T:Fx.Logging.MemoryEvent">
            <summary>
            Events that are emitted to a log that exists only in memory
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Fx.Logging.MemoryEvent.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.Logging.MemoryEvent"/> class from being created
            </summary>
        </member>
        <member name="T:Fx.Logging.MemoryEvent.DetailEvent">
            <summary>
            A <see cref="T:Fx.Logging.MemoryEvent"/> that stores the specifics of a detail event emitted to a log
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.DetailEvent.id">
            <summary>
            The ID of the event that was emitted
            </summary>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.DetailEvent.message">
            <summary>
            The message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="M:Fx.Logging.MemoryEvent.DetailEvent.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Logging.MemoryEvent.DetailEvent"/> class
            </summary>
            <param name="id">The ID of the event that was emitted</param>
            <param name="message">The message containing the specifics about the event that was emitted</param>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.DetailEvent.Id">
            <summary>
            Gets the ID of the event that was emitted
            </summary>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.DetailEvent.Message">
            <summary>
            Gets the message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="T:Fx.Logging.MemoryEvent.InformationEvent">
            <summary>
            A <see cref="T:Fx.Logging.MemoryEvent"/> that stores the specifics of an information event emitted to a log
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.InformationEvent.id">
            <summary>
            The ID of the event that was emitted
            </summary>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.InformationEvent.message">
            <summary>
            The message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="M:Fx.Logging.MemoryEvent.InformationEvent.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Logging.MemoryEvent.InformationEvent"/> class
            </summary>
            <param name="id">The ID of the event that was emitted</param>
            <param name="message">The message containing the specifics about the event that was emitted</param>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.InformationEvent.Id">
            <summary>
            Gets the ID of the event that was emitted
            </summary>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.InformationEvent.Message">
            <summary>
            Gets the message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="T:Fx.Logging.MemoryEvent.WarningEvent">
            <summary>
            A <see cref="T:Fx.Logging.MemoryEvent"/> that stores the specifics of a warning event emitted to a log
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.WarningEvent.id">
            <summary>
            The ID of the event that was emitted
            </summary>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.WarningEvent.message">
            <summary>
            The message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="M:Fx.Logging.MemoryEvent.WarningEvent.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Logging.MemoryEvent.WarningEvent"/> class
            </summary>
            <param name="id">The ID of the event that was emitted</param>
            <param name="message">The message containing the specifics about the event that was emitted</param>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.WarningEvent.Id">
            <summary>
            Gets the ID of the event that was emitted
            </summary>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.WarningEvent.Message">
            <summary>
            Gets the message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="T:Fx.Logging.MemoryEvent.ErrorEvent">
            <summary>
            A <see cref="T:Fx.Logging.MemoryEvent"/> that stores the specifics of an error event emitted to a log
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.ErrorEvent.id">
            <summary>
            The ID of the event that was emitted
            </summary>
        </member>
        <member name="F:Fx.Logging.MemoryEvent.ErrorEvent.message">
            <summary>
            The message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="M:Fx.Logging.MemoryEvent.ErrorEvent.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Logging.MemoryEvent.ErrorEvent"/> class
            </summary>
            <param name="id">The ID of the event that was emitted</param>
            <param name="message">The message containing the specifics about the event that was emitted</param>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.ErrorEvent.Id">
            <summary>
            Gets the ID of the event that was emitted
            </summary>
        </member>
        <member name="P:Fx.Logging.MemoryEvent.ErrorEvent.Message">
            <summary>
            Gets the message containing the specifics about the event that was emitted
            </summary>
        </member>
        <member name="T:Fx.Logging.MemoryLogger">
            <summary>
            A <see cref="T:Fx.Logging.ILogger"/> that stores all of the events emitted to it in memory
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.MemoryLogger.events">
            <summary>
            The collection of <see cref="T:Fx.Logging.MemoryEvent"/>s that have been emitted to this <see cref="T:Fx.Logging.ILogger"/> so far
            </summary>
            <remarks>We use a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> here since it is actually a linked list underneath</remarks>
        </member>
        <member name="M:Fx.Logging.MemoryLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Logging.MemoryLogger"/> class
            </summary>
        </member>
        <member name="P:Fx.Logging.MemoryLogger.Events">
            <summary>
            Gets the collection of <see cref="T:Fx.Logging.MemoryEvent"/>s that have been emitted to this <see cref="T:Fx.Logging.ILogger"/> so far
            </summary>
        </member>
        <member name="M:Fx.Logging.MemoryLogger.EmitDetail(System.Int32,System.String)">
            <summary>
            Emits a verbose event to memory
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="M:Fx.Logging.MemoryLogger.EmitError(System.Int32,System.String)">
            <summary>
            Emits an error event to memory
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="M:Fx.Logging.MemoryLogger.EmitInformation(System.Int32,System.String)">
            <summary>
            Emits an information event to memory
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="M:Fx.Logging.MemoryLogger.EmitWarning(System.Int32,System.String)">
            <summary>
            Emits a warning event to memory
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="T:Fx.Logging.NullLogger">
            <summary>
            A <see cref="T:Fx.Logging.ILogger"/> that swallows all of the events that are emitted to it, rather than passing those events to a log
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.NullLogger.Singleton">
            <summary>
            A singleton instance of the <see cref="T:Fx.Logging.NullLogger"/>
            </summary>
        </member>
        <member name="M:Fx.Logging.NullLogger.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.Logging.NullLogger"/> class from being created
            </summary>
        </member>
        <member name="P:Fx.Logging.NullLogger.Instance">
            <summary>
            Gets a singleton instance of the <see cref="T:Fx.Logging.NullLogger"/>
            </summary>
        </member>
        <member name="M:Fx.Logging.NullLogger.EmitDetail(System.Int32,System.String)">
            <summary>
            Swallows a verbose event
            </summary>
            <param name="id">The ID of the event that is being swallowed</param>
            <param name="message">The message containing the specifics about the event being swallowed</param>
        </member>
        <member name="M:Fx.Logging.NullLogger.EmitError(System.Int32,System.String)">
            <summary>
            Swallows an error event
            </summary>
            <param name="id">The ID of the event that is being swallowed</param>
            <param name="message">The message containing the specifics about the event being swallowed</param>
        </member>
        <member name="M:Fx.Logging.NullLogger.EmitInformation(System.Int32,System.String)">
            <summary>
            Swallows an information event
            </summary>
            <param name="id">The ID of the event that is being swallowed</param>
            <param name="message">The message containing the specifics about the event being swallowed</param>
        </member>
        <member name="M:Fx.Logging.NullLogger.EmitWarning(System.Int32,System.String)">
            <summary>
            Swallows a warning event
            </summary>
            <param name="id">The ID of the event that is being swallowed</param>
            <param name="message">The message containing the specifics about the event being swallowed</param>
        </member>
        <member name="T:Fx.Logging.TraceSourceLogger">
            <summary>
            A <see cref="T:Fx.Logging.ILogger"/> that delegates each of its calls to the corresponding <see cref="T:System.Diagnostics.TraceSource"/> calls
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Logging.TraceSourceLogger.traceSource">
            <summary>
            The <see cref="T:System.Diagnostics.TraceSource"/> that this <see cref="T:Fx.Logging.ILogger"/> will delegate each of its calls to
            </summary>
        </member>
        <member name="M:Fx.Logging.TraceSourceLogger.#ctor(System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Logging.TraceSourceLogger"/> class
            </summary>
            <param name="traceSource">The <see cref="T:System.Diagnostics.TraceSource"/> that each of the new <see cref="T:Fx.Logging.TraceSourceLogger"/>s calls will be delegated to</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="traceSource"/> is null</exception>
        </member>
        <member name="M:Fx.Logging.TraceSourceLogger.EmitDetail(System.Int32,System.String)">
            <summary>
            Emits a verbose event to the underlying <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="M:Fx.Logging.TraceSourceLogger.EmitError(System.Int32,System.String)">
            <summary>
            Emits an error event to the underlying <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="M:Fx.Logging.TraceSourceLogger.EmitInformation(System.Int32,System.String)">
            <summary>
            Emits an information event to the underlying <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="M:Fx.Logging.TraceSourceLogger.EmitWarning(System.Int32,System.String)">
            <summary>
            Emits a warning event to the underlying <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <param name="id">The ID of the event that is being emitted</param>
            <param name="message">The message containing the specifics about the event being emitted</param>
        </member>
        <member name="T:Fx.Serialization.ISerializer">
            <summary>
            Serializes objects into different representations and deserializes those representations into objects
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Fx.Serialization.ISerializer.ToString``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.ISerializer.ToBytes``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.ISerializer.ToStream``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.ISerializer.FromString``1(System.String)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.ISerializer.FromBytes``1(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.ISerializer.FromStream``1(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="T:Fx.Serialization.BinarySerializer">
            <summary>
            A <see cref="T:Fx.Serialization.ISerializer"/> implementation that leverages the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> to serialize and deserialize objects
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Serialization.BinarySerializer.Singleton">
            <summary>
            The singleton instance of the <see cref="T:Fx.Serialization.BinarySerializer"/>
            </summary>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.Serialization.BinarySerializer"/> class from being created
            </summary>
        </member>
        <member name="P:Fx.Serialization.BinarySerializer.Default">
            <summary>
            Gets the singleton instance of the <see cref="T:Fx.Serialization.BinarySerializer"/> that uses the UTF8 encoding
            </summary>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.FromBytes``1(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.FromStream``1(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.FromString``1(System.String)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.ToBytes``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.ToStream``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.ToString``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.BinarySerializer.ToStreamImpl``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.ChunkedMemoryStream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.ChunkedMemoryStream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="T:Fx.Serialization.XmlSerializer">
            <summary>
            A <see cref="T:Fx.Serialization.ISerializer"/> implementation that leverages the XML standard to serialize and deserialize objects
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Serialization.XmlSerializer.Singleton">
            <summary>
            The singleton instance of the <see cref="T:Fx.Serialization.XmlSerializer"/> that uses the default UTF8 encoding
            </summary>
        </member>
        <member name="F:Fx.Serialization.XmlSerializer.encoding">
            <summary>
            The <see cref="T:System.Text.Encoding"/> that should be used when this <see cref="T:Fx.Serialization.ISerializer"/> interacts with <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Serialization.XmlSerializer"/> class
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> that should be used when the resulting <see cref="T:Fx.Serialization.XmlSerializer"/> interacts with <see cref="T:System.String"/>s</param>
        </member>
        <member name="P:Fx.Serialization.XmlSerializer.Default">
            <summary>
            Gets the singleton instance of the <see cref="T:Fx.Serialization.XmlSerializer"/> that uses the UTF8 encoding
            </summary>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.Create(System.Text.Encoding)">
            <summary>
            Generates an instance of the <see cref="T:Fx.Serialization.XmlSerializer"/> that uses the <see cref="T:System.Text.Encoding"/> <paramref name="encoding"/> when interacting with <see cref="T:System.String"/>s
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when the resulting <see cref="T:Fx.Serialization.XmlSerializer"/> interacts with <see cref="T:System.String"/>s</param>
            <returns>An instance of the <see cref="T:Fx.Serialization.XmlSerializer"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="encoding"/> is null</exception>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.FromBytes``1(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.FromStream``1(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.FromString``1(System.String)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.ToBytes``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.ToStream``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.ToString``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="T:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1">
            <summary>
            A generic implementation of the XML serializer
            </summary>
            <typeparam name="T">The type of objects that this <see cref="T:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1"/> can serialize</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.Singleton">
            <summary>
            A singleton instance of the <see cref="T:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1"/>
            </summary>
        </member>
        <member name="F:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.serializer">
            <summary>
            The <see cref="T:System.Xml.Serialization.XmlSerializer"/> that should be used when actually performing serializations for the <typeparamref name="T"/> type
            </summary>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1"/> class from being created
            </summary>
        </member>
        <member name="P:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.Default">
            <summary>
            Gets a singleton instance of the <see cref="T:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1"/>
            </summary>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.FromBytes(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.FromStream(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.FromString(System.String,System.Text.Encoding)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to interact with <paramref name="toDeserialize"/></param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.ToBytes(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.ToStream(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.ToString(`0,System.Text.Encoding)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when generating the resulting <see cref="T:System.String"/> representation</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.XmlSerializer.GenericXmlSerializer`1.ToStreamImpl(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.ChunkedMemoryStream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.ChunkedMemoryStream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="T:Fx.Serialization.JsonSerializer">
            <summary>
            A <see cref="T:Fx.Serialization.ISerializer"/> implementation that leverages the JSON standard to serialize and deserialize objects
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Serialization.JsonSerializer.Singleton">
            <summary>
            The singleton instance of the <see cref="T:Fx.Serialization.JsonSerializer"/> that uses the default UTF8 encoding
            </summary>
        </member>
        <member name="F:Fx.Serialization.JsonSerializer.encoding">
            <summary>
            The <see cref="T:System.Text.Encoding"/> that should be used when this <see cref="T:Fx.Serialization.ISerializer"/> interacts with <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Serialization.JsonSerializer"/> class
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> that should be used when the resulting <see cref="T:Fx.Serialization.JsonSerializer"/> interacts with <see cref="T:System.String"/>s</param>
        </member>
        <member name="P:Fx.Serialization.JsonSerializer.Default">
            <summary>
            Gets the singleton instance of the <see cref="T:Fx.Serialization.JsonSerializer"/> that uses the UTF8 encoding
            </summary>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.Create(System.Text.Encoding)">
            <summary>
            Generates an instance of the <see cref="T:Fx.Serialization.JsonSerializer"/> that uses the <see cref="T:System.Text.Encoding"/> <paramref name="encoding"/> when interacting with <see cref="T:System.String"/>s
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when the resulting <see cref="T:Fx.Serialization.JsonSerializer"/> interacts with <see cref="T:System.String"/>s</param>
            <returns>An instance of the <see cref="T:Fx.Serialization.JsonSerializer"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="encoding"/> is null</exception>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.FromBytes``1(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.FromStream``1(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.FromString``1(System.String)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.ToBytes``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.ToStream``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.ToString``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="T:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1">
            <summary>
            A generic implementation of the JSON serializer
            </summary>
            <typeparam name="T">The type of objects that this <see cref="T:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1"/> can serialize</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.Singleton">
            <summary>
            A singleton instance of the <see cref="T:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1"/>
            </summary>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1"/> class from being created
            </summary>
        </member>
        <member name="P:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.Default">
            <summary>
            Gets a singleton instance of the <see cref="T:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1"/>
            </summary>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.FromBytes(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.FromStream(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.FromString(System.String,System.Text.Encoding)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to interact with <paramref name="toDeserialize"/></param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.ToBytes(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.ToStream(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.ToString(`0,System.Text.Encoding)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when generating the resulting <see cref="T:System.String"/> representation</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.JsonSerializer.GenericJsonSerializer`1.ToStreamImpl(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.ChunkedMemoryStream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.ChunkedMemoryStream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="T:Fx.Serialization.WcfSerializer">
            <summary>
            A <see cref="T:Fx.Serialization.ISerializer"/> implementation that leverages the JSON standard to serialize and deserialize objects
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Serialization.WcfSerializer.Singleton">
            <summary>
            The singleton instance of the <see cref="T:Fx.Serialization.WcfSerializer"/> that uses the default UTF8 encoding
            </summary>
        </member>
        <member name="F:Fx.Serialization.WcfSerializer.encoding">
            <summary>
            The <see cref="T:System.Text.Encoding"/> that should be used when this <see cref="T:Fx.Serialization.ISerializer"/> interacts with <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Fx.Serialization.WcfSerializer"/> class
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> that should be used when the resulting <see cref="T:Fx.Serialization.WcfSerializer"/> interacts with <see cref="T:System.String"/>s</param>
        </member>
        <member name="P:Fx.Serialization.WcfSerializer.Default">
            <summary>
            Gets the singleton instance of the <see cref="T:Fx.Serialization.WcfSerializer"/> that uses the UTF8 encoding
            </summary>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.Create(System.Text.Encoding)">
            <summary>
            Generates an instance of the <see cref="T:Fx.Serialization.WcfSerializer"/> that uses the <see cref="T:System.Text.Encoding"/> <paramref name="encoding"/> when interacting with <see cref="T:System.String"/>s
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when the resulting <see cref="T:Fx.Serialization.WcfSerializer"/> interacts with <see cref="T:System.String"/>s</param>
            <returns>An instance of the <see cref="T:Fx.Serialization.WcfSerializer"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="encoding"/> is null</exception>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.FromBytes``1(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.FromStream``1(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.FromString``1(System.String)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toDeserialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while deserializing <paramref name="toDeserialize"/></exception>
            <typeparam name="T">The type of the object be deserialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.ToBytes``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.ToStream``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.ToString``1(``0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="toSerialize"/> is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occured while serializing <paramref name="toSerialize"/></exception>
            <typeparam name="T">The type of the object be serialized</typeparam>
        </member>
        <member name="T:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1">
            <summary>
            A generic implementation of the WCF serializer
            </summary>
            <typeparam name="T">The type of objects that this <see cref="T:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1"/> can serialize</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.Singleton">
            <summary>
            A singleton instance of the <see cref="T:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1"/>
            </summary>
        </member>
        <member name="F:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.serializer">
            <summary>
            The <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> that should be used when actually performing serializations for the <typeparamref name="T"/> type
            </summary>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1"/> class from being created
            </summary>
        </member>
        <member name="P:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.Default">
            <summary>
            Gets a singleton instance of the <see cref="T:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1"/>
            </summary>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.FromBytes(System.Byte[])">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:byte[]"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.FromStream(System.IO.Stream)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.IO.Stream"/> to deserialize</param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.FromString(System.String,System.Text.Encoding)">
            <summary>
            Deserializes <paramref name="toDeserialize"/> into the object that it represents
            </summary>
            <param name="toDeserialize">The <see cref="T:System.String"/> to deserialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use to interact with <paramref name="toDeserialize"/></param>
            <returns>The object represented by <paramref name="toDeserialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred during deserialization of <paramref name="toDeserialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.ToBytes(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:byte[]"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:byte[]"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.ToStream(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.Stream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.Stream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.ToString(`0,System.Text.Encoding)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.String"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when generating the resulting <see cref="T:System.String"/> representation</param>
            <returns>The <see cref="T:System.String"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="M:Fx.Serialization.WcfSerializer.GenericWcfSerializer`1.ToStreamImpl(`0)">
            <summary>
            Serializes <paramref name="toSerialize"/> into its <see cref="T:System.IO.ChunkedMemoryStream"/> representation
            </summary>
            <param name="toSerialize">The object to serialize</param>
            <returns>The <see cref="T:System.IO.ChunkedMemoryStream"/> representation of <paramref name="toSerialize"/></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if an error occurred while serializing <paramref name="toSerialize"/></exception>
        </member>
        <member name="T:Fx.ValidatedNotNullAttribute">
            <summary>
            Used to notify Code Analysis that the attributed parameter has been validated to not be null once the method returns
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Fx.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Fx.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Fx.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Fx.Strings.ChunkedMemoryStreamRead">
            <summary>
              Looks up a localized string similar to The buffer size must be large enough to hold &apos;count&apos; bytes at &apos;offset&apos;; count: &apos;{0}&apos;; offset: &apos;{1}&apos;; buffer length: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.ChunkedMemoryStreamSetLength">
            <summary>
              Looks up a localized string similar to This stream does not support writing.
            </summary>
        </member>
        <member name="P:Fx.Strings.ChunkedMemoryStreamWriteSize">
            <summary>
              Looks up a localized string similar to The buffer size must be large enough to hold &apos;count&apos; bytes at &apos;offset&apos;; count: &apos;{0}&apos;; offset: &apos;{1}&apos;; buffer length: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.ChunkedMemoryStreamWriteSupport">
            <summary>
              Looks up a localized string similar to This stream does not support writing.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureEnumerableNotEmpty">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; did not contain any elements.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsDefinedEnum">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; was not a valid value of the enumeration &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsEnum">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid enumeration type.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsInstance">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is of type &apos;{1}&apos; which is not derived from &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsPositive">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; was not a positive value.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsValidMacAddress">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid MAC address; provided value: &apos;{1}&apos;; expected format: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsValidSha1">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid SHA1; provided value: &apos;{1}&apos;; expected format: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsValidSha1OrSha2">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid SHA1 or SHA2; provided value: &apos;{1}&apos;; expected formats: &apos;{2}&apos; &apos;{3}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureIsValidSha2">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid SHA2; provided value: &apos;{1}&apos;; expected format: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureNotNegative">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; was a negative value.
            </summary>
        </member>
        <member name="P:Fx.Strings.EnsureNotNullOrEmptyString">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be the empty string.
            </summary>
        </member>
        <member name="P:Fx.Strings.EventIdentifierExtensionsFormat">
            <summary>
              Looks up a localized string similar to There were an unequal number of left and right curly braces in the provided format.
            </summary>
        </member>
        <member name="P:Fx.Strings.LoggerExtensionsFormat">
            <summary>
              Looks up a localized string similar to An error occurred generating this event. The message format was: {0}. The data was: {1}.
            </summary>
        </member>
        <member name="P:Fx.Strings.MemoryTraceListenerTraceEvent">
            <summary>
              Looks up a localized string similar to An error occurred generating this event. The message format was: {0}. The data was: {1}.
            </summary>
        </member>
        <member name="P:Fx.Strings.WcfSerializerDeserialization">
            <summary>
              Looks up a localized string similar to An error occurred during deserialization.
            </summary>
        </member>
        <member name="P:Fx.Strings.WcfSerializerSerialization">
            <summary>
              Looks up a localized string similar to An error occurred during serialization.
            </summary>
        </member>
        <member name="P:Fx.Strings.XmlSerializerDeserialization">
            <summary>
              Looks up a localized string similar to An error occurred during deserialization.
            </summary>
        </member>
        <member name="P:Fx.Strings.XmlSerializerSerialization">
            <summary>
              Looks up a localized string similar to An error occurred during serialization.
            </summary>
        </member>
        <member name="T:System.ByteArrayComparer">
            <summary>
            A <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that compares <see cref="T:byte[]"/>s for equality
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.ByteArrayComparer.Singleton">
            <summary>
            A singleton instance of the <see cref="T:System.ByteArrayComparer"/>
            </summary>
        </member>
        <member name="M:System.ByteArrayComparer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:System.ByteArrayComparer"/> class from being created
            </summary>
        </member>
        <member name="P:System.ByteArrayComparer.Instance">
            <summary>
            Gets a singleton instance of the <see cref="T:System.ByteArrayComparer"/>
            </summary>
        </member>
        <member name="M:System.ByteArrayComparer.Equals(System.Byte[],System.Byte[])">
            <summary>
            Determines whether or not the specified objects are equals
            </summary>
            <param name="x">The first object of type <see cref="T:byte[]"/> to compare</param>
            <param name="y">The second object of type <see cref="T:byte[]"/> to compare</param>
            <returns>true if the specified objects are equal; otherwise, false</returns>
        </member>
        <member name="M:System.ByteArrayComparer.GetHashCode(System.Byte[])">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned</param>
            <returns>A hash code for the specified object</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null</exception>
        </member>
        <member name="T:System.ByteArrayComparer.SafeNativeMethods">
            <summary>
            Unmanaged methods that are used for interacting with byte arrays in memory
            </summary>
        </member>
        <member name="T:System.Collections.Generic.CollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.ToReadOnlyCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Adapts <paramref name="source"/> into a <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to adapt into a <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/></param>
            <returns>The <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/> adapted from <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ToReadOnlyDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Adapts <paramref name="source"/> into a <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/>
            </summary>
            <typeparam name="TKey">The type of the keys in <paramref name="source"/></typeparam>
            <typeparam name="TValue">The type of the values in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to adapt into a <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/></param>
            <returns>The <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/> adapted from <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ToImmutableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> from <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> from <paramref name="source"/>
            </summary>
            <typeparam name="TKey">The type of the keys in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <typeparam name="TValue">The type of the values in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null or one of the elements within <paramref name="source"/> contain a null key</exception>
            <exception cref="T:System.ArgumentException">Thrown if two or more elements of <paramref name="source"/> contain the same key</exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ImmutableList`1"/> from <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.ImmutableList`1"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ImmutableList`1"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.ImmutableCollection">
            <summary>
            Factory methods for the <see cref="T:System.Collections.Generic.ImmutableCollection`1"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ImmutableCollection.Empty``1">
            <summary>
            Returns an instance of a <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> that has no data in it
            </summary>
            <typeparam name="T">The type of elements in the resulting <see cref="T:System.Collections.Generic.ImmutableCollection`1"/></typeparam>
            <returns>An instance of a <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> that has no data in it</returns>
        </member>
        <member name="M:System.Collections.Generic.ImmutableCollection.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> from <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.ImmutableCollection.Internal`1">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T">The generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.Collections.Generic.ImmutableCollection.Internal`1.Empty">
            <summary>
            An instance of a <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> that has no data in it
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ImmutableCollection`1">
            <summary>
            A collection that can only be read from after instantiation
            </summary>
            <typeparam name="T">They type of the elements stored in this collection</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Collections.Generic.ImmutableCollection`1.collection">
            <summary>
            The collection whose data will be used when we delegate each of our calls to it
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ImmutableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ImmutableCollection`1"/> class
            </summary>
            <param name="collection">The collection whose data will be used when we delegate each of our calls to it</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="collection"/> is null</exception>
        </member>
        <member name="P:System.Collections.Generic.ImmutableCollection`1.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ImmutableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.ImmutableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
        </member>
        <member name="T:System.Collections.Generic.ImmutableDictionary">
            <summary>
            Factory methods for the <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary.Empty``2">
            <summary>
            Returns an instance of a <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> that has no data in it
            </summary>
            <typeparam name="TKey">The type of the keys in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <typeparam name="TValue">The type of the values in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <returns>An instance of a <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> that has no data in it</returns>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary.Create``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> from <paramref name="source"/>
            </summary>
            <typeparam name="TKey">The type of the keys in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <typeparam name="TValue">The type of the values in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null or one of the elements within <paramref name="source"/> contain a null key</exception>
            <exception cref="T:System.ArgumentException">Thrown if two or more elements of <paramref name="source"/> contain the same key</exception>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary.Create``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> from <paramref name="source"/>
            </summary>
            <typeparam name="TKey">The type of the keys in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <typeparam name="TValue">The type of the values in the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> of</param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that should be used for determining if two keys are the same within the resulting <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/>
            </param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> or <paramref name="equalityComparer"/> is null or one of the elements within <paramref name="source"/> contain a null key</exception>
            <exception cref="T:System.ArgumentException">Thrown if two or more elements of <paramref name="source"/> contain the same key</exception>
        </member>
        <member name="T:System.Collections.Generic.ImmutableDictionary.Internal`2">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="TKey">The generic key type used by the constituent singletons</typeparam>
            <typeparam name="TValue">The generic value type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.Collections.Generic.ImmutableDictionary.Internal`2.Empty">
            <summary>
            An instance of a <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> that has no data in it
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ImmutableDictionary`2">
            <summary>
            A dictionary that can only be read from after instantiation
            </summary>
            <typeparam name="TKey">The type of the keys stored in this dictionary</typeparam>
            <typeparam name="TValue">The type of the values stored in this dictionary</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Collections.Generic.ImmutableDictionary`2.dictionary">
            <summary>
            The dictionary whose data will be used when we delegate each of our calls to it
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> class
            </summary>
            <param name="dictionary">The dictionary whose data will be used when we delegate each of our calls to it</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="dictionary"/> is null or one of the elements of <paramref name="dictionary"/> contains a null key</exception>
            <exception cref="T:System.ArgumentException">Thrown if two or more elements of <paramref name="dictionary"/> contain the same key</exception>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> class
            </summary>
            <param name="dictionary">The dictionary whose data will be used when we delegate each of our calls to it</param>
            <param name="equalityComparer">
            The comparer that should be used when determining if two keys with the new <see cref="T:System.Collections.Generic.ImmutableDictionary`2"/> are the same
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="dictionary"/> or <paramref name="equalityComparer"/> is null or one of the elements of <paramref name="dictionary"/> contains a null key</exception>
            <exception cref="T:System.ArgumentException">Thrown if two or more elements of <paramref name="dictionary"/> contain the same key</exception>
        </member>
        <member name="P:System.Collections.Generic.ImmutableDictionary`2.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ImmutableDictionary`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ImmutableDictionary`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ImmutableDictionary`2.Item(`0)">
            <summary>
            Gets the element that has the specified key in the read-only dictionary
            </summary>
            <param name="key">The key to locate</param>
            <returns>The element that has the specified key in the read-only dictionary</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the property is retrieved and <paramref name="key"/> is not found</exception>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key
            </summary>
            <param name="key">The key to locate</param>
            <returns>true if the read-only dictionary contains an element that has the specified key; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is null</exception>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value that is associated with the specified key
            </summary>
            <param name="key">The key to locate</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized
            </param>
            <returns>
            true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> interface contains an element that has the specified key; otherwise, false
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is null</exception>
        </member>
        <member name="M:System.Collections.Generic.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
        </member>
        <member name="T:System.Collections.Generic.ImmutableList">
            <summary>
            Factory methods for the <see cref="T:System.Collections.Generic.ImmutableList`1"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ImmutableList.Empty``1">
            <summary>
            Returns an instance of a <see cref="T:System.Collections.Generic.ImmutableList`1"/> that has no data in it
            </summary>
            <typeparam name="T">The type of elements in the resulting <see cref="T:System.Collections.Generic.ImmutableList`1"/></typeparam>
            <returns>An instance of a <see cref="T:System.Collections.Generic.ImmutableList`1"/> that has no data in it</returns>
        </member>
        <member name="M:System.Collections.Generic.ImmutableList.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ImmutableList`1"/> from <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.ImmutableList`1"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ImmutableList`1"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.ImmutableList.Internal`1">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T">The generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.Collections.Generic.ImmutableList.Internal`1.Empty">
            <summary>
            An instance of a <see cref="T:System.Collections.Generic.ImmutableList`1"/> that has no data in it
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ImmutableList`1">
            <summary>
            A list that can only be read from after instantiation
            </summary>
            <typeparam name="T">The type of the elements stored in this list</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Collections.Generic.ImmutableList`1.list">
            <summary>
            The list whose data will be used when we delegate each of our calls to it
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ImmutableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ImmutableList`1"/> class
            </summary>
            <param name="list">The list whose data will be used when we delegate each of our calls to it</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is null</exception>
        </member>
        <member name="P:System.Collections.Generic.ImmutableList`1.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ImmutableList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="M:System.Collections.Generic.ImmutableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
        </member>
        <member name="T:System.Collections.Generic.ListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.ToReadOnlyList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Adapts <paramref name="source"/> into a <see cref="T:System.Collections.Generic.ReadOnlyList`1"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IList`1"/> to adapt into a <see cref="T:System.Collections.Generic.ReadOnlyList`1"/></param>
            <returns>The <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> adapted from <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyCollection">
            <summary>
            Factory methods for the <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyCollection.Create``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/> from <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.ICollection`1"/> to create a <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyCollection`1">
            <summary>
            An adapter which leverages the data in a <see cref="T:System.Collections.Generic.ICollection`1"/> to implement a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
            </summary>
            <typeparam name="T">They type of the elements stored in this collection</typeparam>
            <threadsafety static="true" instance="false"/>
            <remarks>This type is not immutable</remarks>
        </member>
        <member name="F:System.Collections.Generic.ReadOnlyCollection`1.collection">
            <summary>
            The <see cref="T:System.Collections.Generic.ICollection`1"/> whose data will be used when we delegate each of our <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> calls to it
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ReadOnlyCollection`1"/> class
            </summary>
            <param name="collection">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> that we will delegate each of our <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> calls to and will serve as the data source for our implementation
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="collection"/> is null</exception>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>s
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyCollectionExtensions.AsReadOnlyCollection``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Returns <paramref name="collection"/> typed as <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="collection"/></typeparam>
            <param name="collection">The sequence to type as <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/></param>
            <returns><paramref name="collection"/> typed as <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/></returns>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyDictionary">
            <summary>
            Factory methods for the <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyDictionary.Create``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/> from <paramref name="source"/>
            </summary>
            <typeparam name="TKey">The type of the keys in <paramref name="source"/></typeparam>
            <typeparam name="TValue">The type of the values in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to create a <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyDictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>s
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyDictionaryExtensions.AsReadOnlyDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Returns <paramref name="dictionary"/> typed as <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            </summary>
            <typeparam name="TKey">The type of the keys in <paramref name="dictionary"/></typeparam>
            <typeparam name="TValue">The type of the values in <paramref name="dictionary"/></typeparam>
            <param name="dictionary">The sequence to type as <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/></param>
            <returns><paramref name="dictionary"/> typed as <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/></returns>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyDictionary`2">
            <summary>
            An adapter which leverages the data in a <see cref="T:System.Collections.Generic.IDictionary`2"/> to implement a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            </summary>
            <typeparam name="TKey">The type of the keys stored in this dictionary</typeparam>
            <typeparam name="TValue">The type of the values stored in this dictionary</typeparam>
            <threadsafety static="true" instance="false"/>
            <remarks>This type is not immutable</remarks>
        </member>
        <member name="F:System.Collections.Generic.ReadOnlyDictionary`2.dictionary">
            <summary>
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose data will be used when we delegate each of our <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> calls to it
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ReadOnlyDictionary`2"/> class
            </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> that we will delegate each of our <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> calls to and will serve as the data source for our implementation
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="dictionary"/> is null</exception>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element that has the specified key in the read-only dictionary
            </summary>
            <param name="key">The key to locate</param>
            <returns>The element that has the specified key in the read-only dictionary</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the property is retrieved and <paramref name="key"/> is not found</exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key
            </summary>
            <param name="key">The key to locate</param>
            <returns>true if the read-only dictionary contains an element that has the specified key; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is null</exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value that is associated with the specified key
            </summary>
            <param name="key">The key to locate</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized
            </param>
            <returns>
            true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> interface contains an element that has the specified key; otherwise, false
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key"/> is null</exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyList">
            <summary>
            Factory methods for the <see cref="T:System.Collections.Generic.ReadOnlyList`1"/>
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList.Create``1(System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new instance of <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> from <paramref name="source"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="source"/></typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IList`1"/> to create a <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> of</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> based on <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null</exception>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>s
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyListExtensions.AsReadOnlyList``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Returns <paramref name="list"/> typed as <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>
            </summary>
            <typeparam name="T">The type of the elements in <paramref name="list"/></typeparam>
            <param name="list">The sequence to type as <see cref="T:System.Collections.Generic.IReadOnlyList`1"/></param>
            <returns><paramref name="list"/> typed as <see cref="T:System.Collections.Generic.IReadOnlyList`1"/></returns>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyList`1">
            <summary>
            An adapter which leverages data in a <see cref="T:System.Collections.Generic.IList`1"/> to implement a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> 
            </summary>
            <typeparam name="T">The type of the elements store in this list</typeparam>
            <threadsafety static="true" instance="false"/>
            <remarks>This type is not immutable</remarks>
        </member>
        <member name="F:System.Collections.Generic.ReadOnlyList`1.list">
            <summary>
            the <see cref="T:System.Collections.Generic.IList`1"/> whose data will be used when we delegate each of our <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> calls to it
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> class
            </summary>
            <param name="list">
            The <see cref="T:System.Collections.Generic.IList`1"/> that we will delegate each of our <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> calls to and will serve as the data source for our implementation
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="list"/> is null</exception>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
        </member>
        <member name="T:System.ColoredConsole">
            <summary>
            A class which allows synchronized colorization of output to the console
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.ColoredConsole.ColorLock">
            <summary>
            The <see cref="T:System.Object"/> that we will lock on in order to synchronize color changes on the console
            </summary>
        </member>
        <member name="F:System.ColoredConsole.Singleton">
            <summary>
            The singleton instance of the <see cref="T:System.ColoredConsole"/> that uses the default colorization
            </summary>
        </member>
        <member name="F:System.ColoredConsole.color">
            <summary>
            The default color to use when emitting strings to the console
            </summary>
        </member>
        <member name="F:System.ColoredConsole.warningColor">
            <summary>
            The color to use when emitting warnings to the console
            </summary>
        </member>
        <member name="F:System.ColoredConsole.errorColor">
            <summary>
            The color to use when emitting errors to the console
            </summary>
        </member>
        <member name="M:System.ColoredConsole.#ctor(System.ColoredConsoleSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ColoredConsole"/> class
            </summary>
            <param name="settings">The <see cref="T:System.ColoredConsoleSettings"/> that will configure the new instance</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="settings"/> is null</exception>
        </member>
        <member name="P:System.ColoredConsole.Default">
            <summary>
            Gets the singleton instance of the <see cref="T:System.ColoredConsole"/> that uses the default colorization
            </summary>
        </member>
        <member name="M:System.ColoredConsole.Write(System.ConsoleColor,System.IO.TextWriter,System.String)">
            <summary>
            Writes the specified string value to <paramref name="output"/>
            </summary>
            <param name="color">The color that <paramref name="value"/> should be written to the console in</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> where <paramref name="value"/> will be written</param>
            <param name="value">The value to write</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="output"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="color"/> is not a valid <see cref="T:System.ConsoleColor"/></exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <paramref name="output"/> is disposed</exception>
        </member>
        <member name="M:System.ColoredConsole.WriteLine(System.ConsoleColor,System.IO.TextWriter,System.String)">
            <summary>
            Writes the specified string value, followed by the current line terminator, to <paramref name="output"/>
            </summary>
            <param name="color">The color that <paramref name="value"/> should be written to the console in</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> where <paramref name="value"/> will be written</param>
            <param name="value">The value to write</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="output"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="color"/> is not a valid <see cref="T:System.ConsoleColor"/></exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <paramref name="output"/> is disposed</exception>
        </member>
        <member name="M:System.ColoredConsole.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the standard output stream using the specified format information and the default colorization
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using <paramref name="format"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="format"/> is null</exception>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="format"/> is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the <paramref name="arg"/> array
            </exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <remarks>If <paramref name="arg"/> is null, format will be written to the standard output stream</remarks>
        </member>
        <member name="M:System.ColoredConsole.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information and the default colorization
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using <paramref name="format"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="format"/> is null</exception>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="format"/> is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the <paramref name="arg"/> array
            </exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <remarks>If <paramref name="arg"/> is null, format will be written to the standard output stream</remarks>
        </member>
        <member name="M:System.ColoredConsole.WriteWarning(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the standard output stream using the specified format information and the configured warning colorization
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using <paramref name="format"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="format"/> is null</exception>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="format"/> is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the <paramref name="arg"/> array
            </exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <remarks>If <paramref name="arg"/> is null, format will be written to the standard output stream</remarks>
        </member>
        <member name="M:System.ColoredConsole.WriteWarningLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information and the configured warning colorization
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using <paramref name="format"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="format"/> is null</exception>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="format"/> is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the <paramref name="arg"/> array
            </exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <remarks>If <paramref name="arg"/> is null, format will be written to the standard output stream</remarks>
        </member>
        <member name="M:System.ColoredConsole.WriteError(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the standard error stream using the specified format information and the configured error colorization
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using <paramref name="format"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="format"/> is null</exception>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="format"/> is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the <paramref name="arg"/> array
            </exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <remarks>If <paramref name="arg"/> is null, format will be written to the standard error stream</remarks>
        </member>
        <member name="M:System.ColoredConsole.WriteErrorLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard error stream using the specified format information and the default colorization
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using <paramref name="format"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="format"/> is null</exception>
            <exception cref="T:System.FormatException">
            Thrown if <paramref name="format"/> is invalid, or the index of a format item is less than zero, or greater than or equal to the length of the <paramref name="arg"/> array
            </exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred</exception>
            <remarks>If <paramref name="arg"/> is null, format will be written to the standard error stream</remarks>
        </member>
        <member name="T:System.ColoredConsoleSettings">
            <summary>
            The settings used to instantiate a <see cref="T:System.ColoredConsole"/>
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.ColoredConsoleSettings.color">
            <summary>
            The default color to use when emitting strings to the console
            </summary>
        </member>
        <member name="F:System.ColoredConsoleSettings.warningColor">
            <summary>
            The color to use when emitting warnings to the console
            </summary>
        </member>
        <member name="F:System.ColoredConsoleSettings.errorColor">
            <summary>
            The color to use when emitting errors to the console
            </summary>
        </member>
        <member name="M:System.ColoredConsoleSettings.#ctor(System.ConsoleColor,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ColoredConsoleSettings"/> class
            </summary>
            <param name="color">The default color to use when emitting strings to the console</param>
            <param name="warningColor">The color to use when emitting warnings to the console</param>
            <param name="errorColor">The color to use when emitting errors to the console</param>
        </member>
        <member name="P:System.ColoredConsoleSettings.Color">
            <summary>
            Gets the default color to use when emitting strings to the console
            </summary>
        </member>
        <member name="P:System.ColoredConsoleSettings.WarningColor">
            <summary>
            Gets the color to use when emitting warnings to the console
            </summary>
        </member>
        <member name="P:System.ColoredConsoleSettings.ErrorColor">
            <summary>
            Gets the color to use when emitting errors to the console
            </summary>
        </member>
        <member name="T:System.ColoredConsoleSettings.Builder">
            <summary>
            A builder for <see cref="T:System.ColoredConsoleSettings"/>
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:System.ColoredConsoleSettings.Builder.Color">
            <summary>
            Gets or sets the default color to use when emitting strings to the console
            </summary>
        </member>
        <member name="P:System.ColoredConsoleSettings.Builder.WarningColor">
            <summary>
            Gets or sets the color to use when emitting warnings to the console
            </summary>
        </member>
        <member name="P:System.ColoredConsoleSettings.Builder.ErrorColor">
            <summary>
            Gets or sets the color to use when emitting errors to the console
            </summary>
        </member>
        <member name="M:System.ColoredConsoleSettings.Builder.Build">
            <summary>
            Creates a new instance of <see cref="T:System.ColoredConsoleSettings"/> based on the configured properties
            </summary>
            <returns>A new instance of <see cref="T:System.ColoredConsoleSettings"/> based on the configured properties</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <see cref="P:System.ColoredConsoleSettings.Builder.Color"/> or <see cref="P:System.ColoredConsoleSettings.Builder.WarningColor"/> or <see cref="P:System.ColoredConsoleSettings.Builder.ErrorColor"/> is not a valid <see cref="T:System.ConsoleColor"/>
            </exception>
        </member>
        <member name="T:System.ConcurrentRandom">
            <summary>
            A pseudo-random number generator which can be accessed from multiple threads concurrently
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.ConcurrentRandom.random">
            <summary>
            The <see cref="T:System.Random"/> that we should delegate to for each thread that is requesting random numbers
            </summary>
        </member>
        <member name="F:System.ConcurrentRandom.disposed">
            <summary>
            Whether or not this object is disposed
            </summary>
        </member>
        <member name="M:System.ConcurrentRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ConcurrentRandom"/> class
            </summary>
        </member>
        <member name="M:System.ConcurrentRandom.Next">
            <summary>
            Returns a non-negative random integer
            </summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue"/></returns>
        </member>
        <member name="M:System.ConcurrentRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random number returned</param>
            <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="minValue"/> is greater than <paramref name="maxValue"/></exception>
        </member>
        <member name="M:System.ConcurrentRandom.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number generated</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, the range of the return values ordinarily includes 0 but not <paramref name="maxValue"/>. However, if <paramref name="maxValue"/> equals 0, <paramref name="maxValue"/> is returned</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxValue"/> is less than 0</exception>
        </member>
        <member name="M:System.ConcurrentRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers
            </summary>
            <param name="buffer">An array of bytes to contain random numbers</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null</exception>
        </member>
        <member name="M:System.ConcurrentRandom.NextDouble">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0</returns>
        </member>
        <member name="M:System.ConcurrentRandom.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
            </summary>
        </member>
        <member name="T:System.DefaultAction">
            <summary>
            Contains singletons for pre-defined <see cref="T:System.Action"/>s
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.DefaultAction.Empty">
            <summary>
            A singleton <see cref="T:System.Action"/> that has no side-effects
            </summary>
            <returns>The singleton <see cref="T:System.Action"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``1">
            <summary>
            A singleton <see cref="T:System.Action`1"/> that has no side-effects
            </summary>
            <typeparam name="T">The type used in the resulting <see cref="T:System.Action`1"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`1"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``2">
            <summary>
            A singleton <see cref="T:System.Action`2"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`2"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`2"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`2"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``3">
            <summary>
            A singleton <see cref="T:System.Action`3"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`3"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`3"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`3"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`3"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``4">
            <summary>
            A singleton <see cref="T:System.Action`4"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`4"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`4"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`4"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`4"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`4"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``5">
            <summary>
            A singleton <see cref="T:System.Action`5"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`5"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`5"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`5"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`5"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`5"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`5"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``6">
            <summary>
            A singleton <see cref="T:System.Action`6"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`6"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`6"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`6"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`6"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`6"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`6"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`6"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``7">
            <summary>
            A singleton <see cref="T:System.Action`7"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`7"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`7"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`7"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`7"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`7"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`7"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`7"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`7"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``8">
            <summary>
            A singleton <see cref="T:System.Action`8"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`8"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`8"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``9">
            <summary>
            A singleton <see cref="T:System.Action`9"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`9"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`9"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``10">
            <summary>
            A singleton <see cref="T:System.Action`10"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <typeparam name="T10">The tenth type used in the resulting <see cref="T:System.Action`10"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`10"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``11">
            <summary>
            A singleton <see cref="T:System.Action`11"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T10">The tenth type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <typeparam name="T11">The eleventh type used in the resulting <see cref="T:System.Action`11"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`11"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``12">
            <summary>
            A singleton <see cref="T:System.Action`12"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T10">The tenth type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T11">The eleventh type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <typeparam name="T12">The twelfth type used in the resulting <see cref="T:System.Action`12"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`12"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``13">
            <summary>
            A singleton <see cref="T:System.Action`13"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T10">The tenth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T11">The eleventh type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T12">The twelfth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <typeparam name="T13">The thirteenth type used in the resulting <see cref="T:System.Action`13"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`13"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``14">
            <summary>
            A singleton <see cref="T:System.Action`14"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T10">The tenth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T11">The eleventh type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T12">The twelfth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T13">The thirteenth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <typeparam name="T14">The fourteenth type used in the resulting <see cref="T:System.Action`14"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`14"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``15">
            <summary>
            A singleton <see cref="T:System.Action`15"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T10">The tenth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T11">The eleventh type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T12">The twelfth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T13">The thirteenth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T14">The fourteenth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <typeparam name="T15">The fifteenth type used in the resulting <see cref="T:System.Action`15"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`15"/> that has no side-effects</returns>
        </member>
        <member name="M:System.DefaultAction.Empty``16">
            <summary>
            A singleton <see cref="T:System.Action`16"/> that has no side-effects
            </summary>
            <typeparam name="T1">The first type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T2">The second type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T3">The third type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T4">The fourth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T5">The fifth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T6">The sixth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T7">The seventh type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T8">The eighth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T9">The ninth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T10">The tenth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T11">The eleventh type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T12">The twelfth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T13">The thirteenth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T14">The fourteenth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T15">The fifteenth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <typeparam name="T16">The sixteenth type used in the resulting <see cref="T:System.Action`16"/></typeparam>
            <returns>The singleton <see cref="T:System.Action`16"/> that has no side-effects</returns>
        </member>
        <member name="T:System.DefaultAction.Internal">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal.Empty">
            <summary>
            A singleton <see cref="T:System.Action"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`1">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T">The generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`1.Empty">
            <summary>
            A singleton <see cref="T:System.Action`1"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`2">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`2.Empty">
            <summary>
            A singleton <see cref="T:System.Action`2"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`3">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`3.Empty">
            <summary>
            A singleton <see cref="T:System.Action`3"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`4">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`4.Empty">
            <summary>
            A singleton <see cref="T:System.Action`4"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`5">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`5.Empty">
            <summary>
            A singleton <see cref="T:System.Action`5"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`6">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`6.Empty">
            <summary>
            A singleton <see cref="T:System.Action`6"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`7">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`7.Empty">
            <summary>
            A singleton <see cref="T:System.Action`7"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`8">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`8.Empty">
            <summary>
            A singleton <see cref="T:System.Action`8"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`9">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`9.Empty">
            <summary>
            A singleton <see cref="T:System.Action`9"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`10">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <typeparam name="T10">The tenth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`10.Empty">
            <summary>
            A singleton <see cref="T:System.Action`10"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`11">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <typeparam name="T10">The tenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T11">The eleventh generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`11.Empty">
            <summary>
            A singleton <see cref="T:System.Action`11"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`12">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <typeparam name="T10">The tenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T11">The eleventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T12">The twelfth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`12.Empty">
            <summary>
            A singleton <see cref="T:System.Action`12"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`13">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <typeparam name="T10">The tenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T11">The eleventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T12">The twelfth generic type used by the constituent singletons</typeparam>
            <typeparam name="T13">The thirteenth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`13.Empty">
            <summary>
            A singleton <see cref="T:System.Action`13"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`14">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <typeparam name="T10">The tenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T11">The eleventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T12">The twelfth generic type used by the constituent singletons</typeparam>
            <typeparam name="T13">The thirteenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T14">The fourteenth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`14.Empty">
            <summary>
            A singleton <see cref="T:System.Action`14"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`15">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <typeparam name="T10">The tenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T11">The eleventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T12">The twelfth generic type used by the constituent singletons</typeparam>
            <typeparam name="T13">The thirteenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T14">The fourteenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T15">The fifteenth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`15.Empty">
            <summary>
            A singleton <see cref="T:System.Action`15"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultAction.Internal`16">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T1">The first generic type used by the constituent singletons</typeparam>
            <typeparam name="T2">The second generic type used by the constituent singletons</typeparam>
            <typeparam name="T3">The third generic type used by the constituent singletons</typeparam>
            <typeparam name="T4">The fourth generic type used by the constituent singletons</typeparam>
            <typeparam name="T5">The fifth generic type used by the constituent singletons</typeparam>
            <typeparam name="T6">The sixth generic type used by the constituent singletons</typeparam>
            <typeparam name="T7">The seventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T8">The eighth generic type used by the constituent singletons</typeparam>
            <typeparam name="T9">The ninth generic type used by the constituent singletons</typeparam>
            <typeparam name="T10">The tenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T11">The eleventh generic type used by the constituent singletons</typeparam>
            <typeparam name="T12">The twelfth generic type used by the constituent singletons</typeparam>
            <typeparam name="T13">The thirteenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T14">The fourteenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T15">The fifteenth generic type used by the constituent singletons</typeparam>
            <typeparam name="T16">The sixteenth generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultAction.Internal`16.Empty">
            <summary>
            A singleton <see cref="T:System.Action`16"/> that has no side-effects
            </summary>
        </member>
        <member name="T:System.DefaultPredicate">
            <summary>
            Contains singletons for pre-defined <see cref="T:System.Predicate`1"/>s
            </summary>
            <threadsafety static="true"/>
        </member>
        <member name="M:System.DefaultPredicate.True``1">
            <summary>
            A singleton <see cref="T:System.Predicate`1"/> where the input value always matches the criteria
            </summary>
            <typeparam name="T">The type of the objects that are being matched against some criteria</typeparam>
            <returns>The singleton <see cref="T:System.Predicate`1"/> where the input value always matches the criteria</returns>
        </member>
        <member name="M:System.DefaultPredicate.False``1">
            <summary>
            A singleton <see cref="T:System.Predicate`1"/> where the input value never matches the criteria
            </summary>
            <typeparam name="T">The type of the objects that are being matched against some criteria</typeparam>
            <returns>The singleton <see cref="T:System.Predicate`1"/> where the input value never matches the criteria</returns>
        </member>
        <member name="T:System.DefaultPredicate.Internal`1">
            <summary>
            A generic-type internal class that contains singleton fields
            </summary>
            <typeparam name="T">The generic type used by the constituent singletons</typeparam>
            <threadsafety static="true"/>
        </member>
        <member name="F:System.DefaultPredicate.Internal`1.True">
            <summary>
            A singleton <see cref="T:System.Predicate`1"/> where the input value always matches the criteria
            </summary>
        </member>
        <member name="F:System.DefaultPredicate.Internal`1.False">
            <summary>
            A singleton <see cref="T:System.Predicate`1"/> where the input value never matches the criteria
            </summary>
        </member>
        <member name="T:System.Diagnostics.MemoryTraceListener">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> that stores the events it emits in memory and exposes the collection of all events emitted so far
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Diagnostics.MemoryTraceListener.traceEvents">
            <summary>
            The collection of <see cref="T:System.Diagnostics.TraceEvent"/>s that have been emitted by this <see cref="T:System.Diagnostics.TraceListener"/> so far
            </summary>
            <remarks>We use a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> here since it is actually a linked list underneath</remarks>
        </member>
        <member name="P:System.Diagnostics.MemoryTraceListener.TraceEvents">
            <summary>
            Gets the collection of <see cref="T:System.Diagnostics.TraceEvent"/>s that have been emitted by this <see cref="T:System.Diagnostics.TraceListener"/> so far
            </summary>
        </member>
        <member name="P:System.Diagnostics.MemoryTraceListener.IsThreadSafe">
            <summary>
            Gets a value indicating whether the trace listener is thread safe
            </summary>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.Create(System.Diagnostics.MemoryTraceListener@)">
            <summary>
            Creates a new <see cref="T:System.Diagnostics.MemoryTraceListener"/>, attaches it to a <see cref="T:System.Diagnostics.TraceSource"/>, and then returns the <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <param name="listener">The <see cref="T:System.Diagnostics.MemoryTraceListener"/> that is attached to the resulting <see cref="T:System.Diagnostics.TraceSource"/></param>
            <returns>A <see cref="T:System.Diagnostics.TraceSource"/> with a new <see cref="T:System.Diagnostics.MemoryTraceListener"/> attached</returns>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.Write(System.String)">
            <summary>
            Writes the specified message to the listener
            </summary>
            <param name="message">A message to write</param>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.WriteLine(System.String)">
            <summary>
            Writes the specified message the the listener; this listener has no concept of a newline
            </summary>
            <param name="message">A message to write</param>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace</param>
            <param name="id">A numeric identifier for the event</param>
            <param name="data">The trace data to emit</param>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace</param>
            <param name="id">A numeric identifier for the event</param>
            <param name="data">An array of objects to emit as data</param>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes trace and event information to the listener specific output
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace</param>
            <param name="id">A numeric identifier for the event</param>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace</param>
            <param name="id">A numeric identifier for the event</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format</param>
        </member>
        <member name="M:System.Diagnostics.MemoryTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace</param>
            <param name="id">A numeric identifier for the event</param>
            <param name="message">A message to write</param>
        </member>
        <member name="T:System.Diagnostics.NegativeTraceFilter">
            <summary>
            a <see cref="T:System.Diagnostics.TraceFilter"/> that always filters events
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Diagnostics.NegativeTraceFilter.Singleton">
            <summary>
            A singleton instance of the <see cref="T:System.Diagnostics.NegativeTraceFilter"/>
            </summary>
        </member>
        <member name="M:System.Diagnostics.NegativeTraceFilter.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:System.Diagnostics.NegativeTraceFilter"/> class from being created
            </summary>
        </member>
        <member name="P:System.Diagnostics.NegativeTraceFilter.Instance">
            <summary>
            Gets a singleton instance of the <see cref="T:System.Diagnostics.NegativeTraceFilter"/>
            </summary>
        </member>
        <member name="M:System.Diagnostics.NegativeTraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
            <summary>
            Indicates that a <see cref="T:System.Diagnostics.TraceListener"/> should not trace an event
            </summary>
            <param name="cache">The <see cref="T:System.Diagnostics.TraceEventCache"/> that contains information for the trace event</param>
            <param name="source">The name of the source</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace</param>
            <param name="id">A trace identifier number</param>
            <param name="formatOrMessage">Either the format to use for writing an array of arguments specified by the <paramref name="args"/> parameter, or a message to write</param>
            <param name="args">An array of argument objects</param>
            <param name="data1">A trace data object</param>
            <param name="data">An array of trace data objects</param>
            <returns>false for any trace event</returns>
        </member>
        <member name="T:System.Diagnostics.TraceEvent">
            <summary>
            A single event that has been emitted by a <see cref="T:System.Diagnostics.TraceListener"/>
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:System.Diagnostics.TraceEvent.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:System.Diagnostics.TraceEvent"/> class from being created
            </summary>
        </member>
        <member name="T:System.Diagnostics.TraceEvent.WriteEvent">
            <summary>
            A <see cref="T:System.Diagnostics.TraceEvent"/> that represents an event that was emitted by a <see cref="T:System.Diagnostics.TraceListener"/> using the <see cref="M:System.Diagnostics.TraceListener.Write(System.String)"/> 
            call
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.WriteEvent.message">
            <summary>
            The message that was emitted as part of this event
            </summary>
        </member>
        <member name="M:System.Diagnostics.TraceEvent.WriteEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.TraceEvent.WriteEvent"/> class
            </summary>
            <param name="message">The message being published by this event</param>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.WriteEvent.Message">
            <summary>
            Gets the message that was emitted as part of this event
            </summary>
        </member>
        <member name="T:System.Diagnostics.TraceEvent.DataEvent">
            <summary>
            A <see cref="T:System.Diagnostics.TraceEvent"/> that represents an event that was emitted by a <see cref="T:System.Diagnostics.TraceListener"/> using the 
            <see cref="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])"/> call
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.callStack">
            <summary>
            The call stack at the time that this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.dateTime">
            <summary>
            The time at which this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.logicalOperationStack">
            <summary>
            The correlation data at the time this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.processId">
            <summary>
            The ID of the process that emitted this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.threadId">
            <summary>
            The ID of the thread that emitted this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.timestamp">
            <summary>
            The number of ticks on the machine when this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.source">
            <summary>
            The name of the <see cref="T:System.Diagnostics.TraceSource"/> that emitted this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.eventType">
            <summary>
            The <see cref="T:System.Diagnostics.TraceEventType"/> of this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.id">
            <summary>
            The ID of this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.DataEvent.data">
            <summary>
            The data that was emitted as part of this event
            </summary>
        </member>
        <member name="M:System.Diagnostics.TraceEvent.DataEvent.#ctor(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.TraceEvent.DataEvent"/> class
            </summary>
            <param name="eventCache">The <see cref="T:System.Diagnostics.TraceEventCache"/> that was populated to emit this event</param>
            <param name="source">The name of <see cref="T:System.Diagnostics.TraceSource"/> that is emitting this event</param>
            <param name="eventType">The <see cref="T:System.Diagnostics.TraceEventType"/> of this event</param>
            <param name="id">The ID of this event</param>
            <param name="data">The data being publishing by this event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="eventCache"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="eventType"/> is not a valid <see cref="T:System.Diagnostics.TraceEvent"/></exception>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.CallStack">
            <summary>
            Gets the call stack at the time that this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.DateTime">
            <summary>
            Gets the time at which this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.LogicalOperationStack">
            <summary>
            Gets the correlation data at the time this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.ProcessId">
            <summary>
            Gets the ID of the process that emitted this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.ThreadId">
            <summary>
            Gets the ID of the thread that emitted this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.Timestamp">
            <summary>
            Gets the number of ticks on the machine when this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.Source">
            <summary>
            Gets the name of the <see cref="T:System.Diagnostics.TraceSource"/> that emitted this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.EventType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceEventType"/> of this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.Id">
            <summary>
            Gets the ID of this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.DataEvent.Data">
            <summary>
            Gets the data that was emitted as part of this event
            </summary>
        </member>
        <member name="T:System.Diagnostics.TraceEvent.MessageEvent">
            <summary>
            A <see cref="T:System.Diagnostics.TraceEvent"/> that represents an event that was emitted by a <see cref="T:System.Diagnostics.TraceListener"/> using the 
            <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)"/> call
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.callStack">
            <summary>
            The call stack at the time that this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.dateTime">
            <summary>
            The time at which this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.logicalOperationStack">
            <summary>
            The correlation data at the time this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.processId">
            <summary>
            The ID of the process that emitted this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.threadId">
            <summary>
            The ID of the thread that emitted this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.timestamp">
            <summary>
            The number of ticks on the machine when this event was emitted
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.source">
            <summary>
            The name of the <see cref="T:System.Diagnostics.TraceSource"/> that emitted this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.eventType">
            <summary>
            The <see cref="T:System.Diagnostics.TraceEventType"/> of this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.id">
            <summary>
            The ID of this event
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceEvent.MessageEvent.message">
            <summary>
            The message that was emitted as part of this event
            </summary>
        </member>
        <member name="M:System.Diagnostics.TraceEvent.MessageEvent.#ctor(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.TraceEvent.MessageEvent"/> class
            </summary>
            <param name="eventCache">The <see cref="T:System.Diagnostics.TraceEventCache"/> that was populated to emit this event</param>
            <param name="source">The name of <see cref="T:System.Diagnostics.TraceSource"/> that is emitting this event</param>
            <param name="eventType">The <see cref="T:System.Diagnostics.TraceEventType"/> of this event</param>
            <param name="id">The ID of this event</param>
            <param name="message">The message being published by this event</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="eventCache"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="eventType"/> is not a valid <see cref="T:System.Diagnostics.TraceEventType"/></exception>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.CallStack">
            <summary>
            Gets the call stack at the time that this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.DateTime">
            <summary>
            Gets the time at which this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.LogicalOperationStack">
            <summary>
            Gets the correlation data at the time this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.ProcessId">
            <summary>
            Gets the ID of the process that emitted this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.ThreadId">
            <summary>
            Gets the ID of the thread that emitted this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.Timestamp">
            <summary>
            Gets the number of ticks on the machine when this event was emitted
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.Source">
            <summary>
            Gets the name of the <see cref="T:System.Diagnostics.TraceSource"/> that emitted this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.EventType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceEventType"/> of this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.Id">
            <summary>
            Gets the ID of this event
            </summary>
        </member>
        <member name="P:System.Diagnostics.TraceEvent.MessageEvent.Message">
            <summary>
            Gets the message that was emitted as part of this event
            </summary>
        </member>
        <member name="T:System.IO.ChunkedMemoryStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> implementation which stores all of its data in memory, but stores them as a collection of arrays in order to get around the object size limit as well as the array size limit that are imposed by the .NET framework.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:System.IO.ChunkedMemoryStream.chunkSize">
            <summary>
            The size, in bytes, of each chunk that is stored within this <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="F:System.IO.ChunkedMemoryStream.data">
            <summary>
            The collection of byte arrays which, when concatenated, contain all of the data represented by this <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="F:System.IO.ChunkedMemoryStream.writable">
            <summary>
            Whether or not this <see cref="T:System.IO.Stream"/> can be written to
            </summary>
        </member>
        <member name="F:System.IO.ChunkedMemoryStream.position">
            <summary>
            The position of the next byte within this <see cref="T:System.IO.Stream"/>, relative to the beginning of the <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="F:System.IO.ChunkedMemoryStream.partialIndex">
            <summary>
            The index of the next available free byte of the last array in <see cref="F:System.IO.ChunkedMemoryStream.data"/>
            </summary>
        </member>
        <member name="F:System.IO.ChunkedMemoryStream.disposed">
            <summary>
            Whether or not this object is disposed
            </summary>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.ChunkedMemoryStream"/> class, using a default chunk size of 4MB
            </summary>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.ChunkedMemoryStream"/> class
            </summary>
            <param name="chunkSize">The size, in bytes, of each chunk that is stored within this <see cref="T:System.IO.Stream"/></param>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.ChunkedMemoryStream"/> class that contains the data in <paramref name="data"/>
            </summary>
            <param name="data">The bytes that should be contained within the resulting <see cref="T:System.IO.Stream"/></param>
            <param name="writable">Whether or not the resulting <see cref="T:System.IO.Stream"/> should be allowed to be written to, or if it should be read-only</param>
        </member>
        <member name="P:System.IO.ChunkedMemoryStream.CanRead">
            <summary>
            Gets that the <see cref="T:System.IO.ChunkedMemoryStream"/> always supports reading
            </summary>
        </member>
        <member name="P:System.IO.ChunkedMemoryStream.CanSeek">
            <summary>
            Gets that the <see cref="T:System.IO.ChunkedMemoryStream"/> always supports seeking
            </summary>
        </member>
        <member name="P:System.IO.ChunkedMemoryStream.CanWrite">
            <summary>
            Gets whether or not this <see cref="T:System.IO.Stream"/> supporting being written to
            </summary>
        </member>
        <member name="P:System.IO.ChunkedMemoryStream.Length">
            <summary>
            Gets the length, in bytes, of this <see cref="T:System.IO.Stream"/>
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this <see cref="T:System.IO.Stream"/> is disposed</exception>
        </member>
        <member name="P:System.IO.ChunkedMemoryStream.Position">
            <summary>
            Gets or sets the current position within this <see cref="T:System.IO.Stream"/>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if setting to a negative value</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this <see cref="T:System.IO.Stream"/> is disposed</exception>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Flush">
            <summary>
            Since all data is accessed directly in memory, this method is merely a placeholder and does nothing
            </summary>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from this <see cref="T:System.IO.Stream"/> and advances the position within the <see cref="T:System.IO.Stream"/> by the number of bytes read
            </summary>
            <param name="buffer">When the method returns, this array will contain its original contents with the values between <paramref name="offset"/> and <paramref name="offset"/> + <paramref name="count"/> - 1 (inclusive) replaced by the bytes read from this <see cref="T:System.IO.Stream"/></param>
            <param name="offset">The zero-based offset in <paramref name="buffer"/> to which to begin storing the data read from this <see cref="T:System.IO.Stream"/></param>
            <param name="count">The maximum number of bytes to be read from this <see cref="T:System.IO.Stream"/></param>
            <returns>The total number of bytes read into <paramref name="buffer"/>. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than <paramref name="buffer"/>'s length</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this <see cref="T:System.IO.Stream"/> is disposed</exception>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within this <see cref="T:System.IO.Stream"/> to the specified value
            </summary>
            <param name="offset">The new position within this <see cref="T:System.IO.Stream"/>, relative to <paramref name="origin"/></param>
            <param name="origin">The reference point within this <see cref="T:System.IO.Stream"/> to begin seeking at</param>
            <returns>The new position within this <see cref="T:System.IO.Stream"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if seeking will cause this <see cref="T:System.IO.Stream"/>'s position to be at a negative value or <paramref name="origin"/> is not a valid <see cref="T:System.IO.SeekOrigin"/></exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this <see cref="T:System.IO.Stream"/> is disposed</exception>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this <see cref="T:System.IO.Stream"/> to <paramref name="value"/>
            </summary>
            <param name="value">The value to set the length to</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is negative</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this <see cref="T:System.IO.Stream"/> is not currently writable</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this <see cref="T:System.IO.Stream"/> is disposed</exception>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to this <see cref="T:System.IO.Stream"/> and advances the current position within this <see cref="T:System.IO.Stream"/> by the number of bytes written
            </summary>
            <param name="buffer">This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to this <see cref="T:System.IO.Stream"/></param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to this <see cref="T:System.IO.Stream"/></param>
            <param name="count">The number of bytes to be written to this <see cref="T:System.IO.Stream"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset"/> or <paramref name="count"/> is negative</exception>
            <exception cref="T:System.ArgumentException">Thrown if the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than <paramref name="buffer"/>'s length</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this <see cref="T:System.IO.Stream"/> does not currently support writing</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this <see cref="T:System.IO.Stream"/> is disposed</exception>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.ToArray">
            <summary>
            Converts the data represented by this <see cref="T:System.IO.Stream"/> into an array containing that data
            </summary>
            <returns>The data represented by this <see cref="T:System.IO.Stream"/></returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this <see cref="T:System.IO.Stream"/> is disposed</exception>
            <remarks>.NET imposes size limits to both objects and arrays. Because of this, calling this method when there are 2GB or more data stored within this <see cref="T:System.IO.Stream"/> will result in either a <see cref="T:System.OutOfMemoryException"/> being thrown, or this method hanging indefinitely. You should check the <see cref="P:System.IO.ChunkedMemoryStream.Length"/> of this <see cref="T:System.IO.Stream"/> before calling this method.</remarks>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this <see cref="T:System.IO.Stream"/>, and optionally the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources, false to release only unmanaged resources</param>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Max(System.Int64,System.Int64)">
            <summary>
            Determines the larger of two values
            </summary>
            <param name="a">The first value</param>
            <param name="b">The second value</param>
            <returns>The larger of <paramref name="a"/> and <paramref name="b"/></returns>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Min(System.Int64,System.Int64)">
            <summary>
            Determines the smaller of two values
            </summary>
            <param name="a">The first value</param>
            <param name="b">The second value</param>
            <returns>The smaller of <paramref name="a"/> and <paramref name="b"/></returns>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.Expand(System.Int64)">
            <summary>
            Expands the number of arrays store in <see cref="F:System.IO.ChunkedMemoryStream.data"/> to be large enough to at least contain a length of <paramref name="length"/> bytes
            </summary>
            <param name="length">The number of bytes that should be able to be contained within <see cref="F:System.IO.ChunkedMemoryStream.data"/> once this method returns</param>
        </member>
        <member name="M:System.IO.ChunkedMemoryStream.ThrowIfDisposed">
            <summary>
            Determines if this object is disposed, and throw a <see cref="T:System.ObjectDisposedException"/> if it is
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed</exception>
        </member>
        <member name="T:System.MockRandom">
            <summary>
            A <see cref="T:System.Random"/> implementation that reads from a predictable set of data bytes for testing purposes
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:System.MockRandom.IntegerRange">
            <summary>
            The range of the <see cref="T:System.Int32"/> values
            </summary>
        </member>
        <member name="F:System.MockRandom.data">
            <summary>
            The <see cref="T:byte[]"/> that will be the source of the resulting "random" values
            </summary>
        </member>
        <member name="F:System.MockRandom.index">
            <summary>
            The current index within <see cref="F:System.MockRandom.data"/> that should be read from next
            </summary>
        </member>
        <member name="M:System.MockRandom.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.MockRandom"/> class
            </summary>
            <param name="data">The <see cref="T:byte[]"/> that will be the source of the resulting "random" values</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="data"/> is empty</exception>
        </member>
        <member name="M:System.MockRandom.Next">
            <summary>
            Returns a non-negative random integer
            </summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue"/></returns>
        </member>
        <member name="M:System.MockRandom.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number generated</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, the range of the return values ordinarily includes 0 but not <paramref name="maxValue"/>. However, if <paramref name="maxValue"/> equals 0, <paramref name="maxValue"/> is returned</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxValue"/> is less than 0</exception>
        </member>
        <member name="M:System.MockRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random number returned</param>
            <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="minValue"/> is greater than <paramref name="maxValue"/></exception>
        </member>
        <member name="M:System.MockRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers
            </summary>
            <param name="buffer">An array of bytes to contain random numbers</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is null</exception>
        </member>
        <member name="M:System.MockRandom.NextDouble">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0</returns>
        </member>
        <member name="T:System.OutFunc`2">
            <summary>
            Encapsulates a method that has no input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`3">
            <summary>
            Encapsulates a method that has one input parameter, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn">The type of the input parameter of the method that this delegate encapsulates</typeparam>  
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg">The input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`4">
            <summary>
            Encapsulates a method that has two input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`5">
            <summary>
            Encapsulates a method that has three input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`6">
            <summary>
            Encapsulates a method that has four input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`7">
            <summary>
            Encapsulates a method that has five input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`8">
            <summary>
            Encapsulates a method that has six input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`9">
            <summary>
            Encapsulates a method that has seven input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`10">
            <summary>
            Encapsulates a method that has eight input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`11">
            <summary>
            Encapsulates a method that has nine input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`12">
            <summary>
            Encapsulates a method that has ten input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn10">The type of the tenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg10">The tenth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`13">
            <summary>
            Encapsulates a method that has eleven input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn10">The type of the tenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn11">The type of the eleventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg10">The tenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg11">The eleventh input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`14">
            <summary>
            Encapsulates a method that has twelve input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn10">The type of the tenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn11">The type of the eleventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn12">The type of the twelfth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg10">The tenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg11">The eleventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg12">The twelfth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`15">
            <summary>
            Encapsulates a method that has thirteen input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn10">The type of the tenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn11">The type of the eleventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn12">The type of the twelfth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn13">The type of the thirteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg10">The tenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg11">The eleventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg12">The twelfth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg13">The thirteenth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`16">
            <summary>
            Encapsulates a method that has fourteen input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn10">The type of the tenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn11">The type of the eleventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn12">The type of the twelfth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn13">The type of the thirteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn14">The type of the fourteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg10">The tenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg11">The eleventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg12">The twelfth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg13">The thirteenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg14">The fourteenth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`17">
            <summary>
            Encapsulates a method that has fifteen input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn10">The type of the tenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn11">The type of the eleventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn12">The type of the twelfth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn13">The type of the thirteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn14">The type of the fourteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn15">The type of the fifteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg10">The tenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg11">The eleventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg12">The twelfth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg13">The thirteenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg14">The fourteenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg15">The fifteenth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
        <member name="T:System.OutFunc`18">
            <summary>
            Encapsulates a method that has sixteen input parameters, one output parameter, and returns a value of the type specified by the <typeparamref name="TResult"/> parameter
            </summary>
            <typeparam name="TIn1">The type of the first input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn2">The type of the second input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn3">The type of the third input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn4">The type of the fourth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn5">The type of the fifth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn6">The type of the sixth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn7">The type of the seventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn8">The type of the eighth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn9">The type of the ninth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn10">The type of the tenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn11">The type of the eleventh input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn12">The type of the twelfth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn13">The type of the thirteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn14">The type of the fourteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn15">The type of the fifteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TIn16">The type of the sixteenth input parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TOut">The type of the output parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="inArg1">The first input parameter of the method that this delegate encapsulates</param>
            <param name="inArg2">The second input parameter of the method that this delegate encapsulates</param>
            <param name="inArg3">The third input parameter of the method that this delegate encapsulates</param>
            <param name="inArg4">The fourth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg5">The fifth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg6">The sixth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg7">The seventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg8">The eighth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg9">The ninth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg10">The tenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg11">The eleventh input parameter of the method that this delegate encapsulates</param>
            <param name="inArg12">The twelfth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg13">The thirteenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg14">The fourteenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg15">The fifteenth input parameter of the method that this delegate encapsulates</param>
            <param name="inArg16">The sixteenth input parameter of the method that this delegate encapsulates</param>
            <param name="outArg">The output parameter of the method that this delegate encapsulates</param>
            <returns>The return value of the method that this delegate encapsulates</returns>
        </member>
    </members>
</doc>
